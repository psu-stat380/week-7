{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "c4dae1b6",
   "metadata": {},
   "source": [
    "<!-- ---\n",
    "title: \"Week 7\"\n",
    "title-block-banner: true\n",
    "title-block-style: default\n",
    "execute:\n",
    "  freeze: true\n",
    "  cache: true\n",
    "format: html\n",
    "# format: pdf\n",
    "--- -->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "99d0176d-3028-42c9-b4db-e49ae5d032fa",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: ‘renv’\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    embed, update\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:utils’:\n",
      "\n",
      "    history, upgrade\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    autoload, load, remove\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#| echo: false\n",
    "#| message: false\n",
    "#| output: false\n",
    "dir <- \"~/work/courses/stat380/weeks/week-7/\"\n",
    "setwd(dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f6dd5b5",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "library(renv)\n",
    "renv::activate(dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d71c7bf",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "## Agenda:\n",
    "\n",
    "1. Automatic differentiation\n",
    "1. Cross validation\n",
    "1. Classification\n",
    "\n",
    "#### Packages we will require this week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8d19e576-83a6-4d5a-b2e4-58be67e2b81c",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ISLR2\n",
      "\n",
      "Loading required package: dplyr\n",
      "\n",
      "\n",
      "Attaching package: ‘dplyr’\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "\n",
      "Loading required package: tidyr\n",
      "\n",
      "Loading required package: readr\n",
      "\n",
      "Loading required package: purrr\n",
      "\n",
      "\n",
      "Attaching package: ‘purrr’\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:renv’:\n",
      "\n",
      "    modify\n",
      "\n",
      "\n",
      "Loading required package: glmnet\n",
      "\n",
      "Loading required package: Matrix\n",
      "\n",
      "\n",
      "Attaching package: ‘Matrix’\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:tidyr’:\n",
      "\n",
      "    expand, pack, unpack\n",
      "\n",
      "\n",
      "Loaded glmnet 4.1-6\n",
      "\n",
      "Loading required package: caret\n",
      "\n",
      "Loading required package: ggplot2\n",
      "\n",
      "Loading required package: lattice\n",
      "\n",
      "\n",
      "Attaching package: ‘caret’\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:purrr’:\n",
      "\n",
      "    lift\n",
      "\n",
      "\n",
      "Loading required package: repr\n",
      "\n",
      "Loading required package: torch\n",
      "\n",
      "Loading required package: mlbench\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".dl-inline {width: auto; margin:0; padding: 0}\n",
       ".dl-inline>dt, .dl-inline>dd {float: none; width: auto; display: inline-block}\n",
       ".dl-inline>dt::after {content: \":\\0020\"; padding-right: .5ex}\n",
       ".dl-inline>dt:not(:first-of-type) {padding-left: .5ex}\n",
       "</style><dl class=dl-inline><dt>ISLR2</dt><dd>TRUE</dd><dt>dplyr</dt><dd>TRUE</dd><dt>tidyr</dt><dd>TRUE</dd><dt>readr</dt><dd>TRUE</dd><dt>purrr</dt><dd>TRUE</dd><dt>glmnet</dt><dd>TRUE</dd><dt>caret</dt><dd>TRUE</dd><dt>repr</dt><dd>TRUE</dd><dt>torch</dt><dd>TRUE</dd><dt>mlbench</dt><dd>TRUE</dd></dl>\n"
      ],
      "text/latex": [
       "\\begin{description*}\n",
       "\\item[ISLR2] TRUE\n",
       "\\item[dplyr] TRUE\n",
       "\\item[tidyr] TRUE\n",
       "\\item[readr] TRUE\n",
       "\\item[purrr] TRUE\n",
       "\\item[glmnet] TRUE\n",
       "\\item[caret] TRUE\n",
       "\\item[repr] TRUE\n",
       "\\item[torch] TRUE\n",
       "\\item[mlbench] TRUE\n",
       "\\end{description*}\n"
      ],
      "text/markdown": [
       "ISLR2\n",
       ":   TRUEdplyr\n",
       ":   TRUEtidyr\n",
       ":   TRUEreadr\n",
       ":   TRUEpurrr\n",
       ":   TRUEglmnet\n",
       ":   TRUEcaret\n",
       ":   TRUErepr\n",
       ":   TRUEtorch\n",
       ":   TRUEmlbench\n",
       ":   TRUE\n",
       "\n"
      ],
      "text/plain": [
       "  ISLR2   dplyr   tidyr   readr   purrr  glmnet   caret    repr   torch mlbench \n",
       "   TRUE    TRUE    TRUE    TRUE    TRUE    TRUE    TRUE    TRUE    TRUE    TRUE "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| message: false\n",
    "#| results: hide\n",
    "#| output: false\n",
    "packages <- c(\n",
    "    # Old packages\n",
    "    \"ISLR2\",\n",
    "    \"dplyr\",\n",
    "    \"tidyr\",\n",
    "    \"readr\",\n",
    "    \"purrr\",\n",
    "    \"glmnet\",\n",
    "    \"caret\",\n",
    "    \"repr\",\n",
    "    # NEW\n",
    "    \"torch\",\n",
    "    \"mlbench\"\n",
    ")\n",
    "\n",
    "# renv::install(packages)\n",
    "sapply(packages, require, character.only=TRUE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fc291fa",
   "metadata": {},
   "source": [
    "\n",
    "<br><br><br><br>\n",
    "\n",
    "---\n",
    "\n",
    "# Thu, Feb 23\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daa33257-4a32-46e1-9384-ef154e49bdd0",
   "metadata": {},
   "source": [
    "In the last class we looked at the following **numerical** implementation of gradient descent in R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "18d9c95d-fa9f-4dc5-94ab-6ca9a8ea918b",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "x <- cars$speed\n",
    "y <- cars$dist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "835f36b7-53a0-4538-a9b2-c8356bebd179",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "2653.73369011127"
      ],
      "text/latex": [
       "2653.73369011127"
      ],
      "text/markdown": [
       "2653.73369011127"
      ],
      "text/plain": [
       "[1] 2653.734"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# define the loss function\n",
    "\n",
    "Loss <- function(b, x, y){\n",
    "    squares <- (y - b[1] - b[2] * x)^2\n",
    "    return( mean(squares) )\n",
    "}\n",
    "\n",
    "b <- rnorm(2)\n",
    "Loss(b, cars$speed, cars$dist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d528f497-85ab-40a1-9837-4b29fbd3d516",
   "metadata": {},
   "source": [
    "This is the **numerical** gradient function we looked at:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "98a92033-5269-4a92-9422-57f505cdfba6",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>-89.169776106246</li><li>-1592.52727955845</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item -89.169776106246\n",
       "\\item -1592.52727955845\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. -89.169776106246\n",
       "2. -1592.52727955845\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]   -89.16978 -1592.52728"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# define a function to compute the gradients\n",
    "\n",
    "grad <- function(b, Loss, x, y, eps=1e-5){\n",
    "    b0_up <- Loss( c(b[1] + eps, b[2]), x, y)\n",
    "    b0_dn <- Loss( c(b[1] - eps, b[2]), x, y)\n",
    "    \n",
    "    b1_up <- Loss( c(b[1], b[2] + eps), x, y)\n",
    "    b1_dn <- Loss( c(b[1], b[2] - eps), x, y)\n",
    "    \n",
    "    grad_b0_L <- (b0_up - b0_dn) / (2 * eps)\n",
    "    grad_b1_L <- (b1_up - b1_dn) / (2 * eps)\n",
    "    \n",
    "    return( c(grad_b0_L, grad_b1_L) )\n",
    "}\n",
    "\n",
    "grad(b, Loss, cars$speed, cars$dist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bbd82c6-8e2b-485e-bae3-bc433305e8f2",
   "metadata": {},
   "source": [
    "The gradient descent implementation is below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6a7f9056-d4f7-456f-97be-c304eb8bc05d",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration: 1\t Loss value: 2266.69206282174\n",
      "Iteration: 2\t Loss value: 2059.23910669384\n",
      "Iteration: 3\t Loss value: 1873.22918303142\n",
      "Iteration: 4\t Loss value: 1706.44585378992\n",
      "Iteration: 5\t Loss value: 1556.90178087535\n",
      "Iteration: 6\t Loss value: 1422.815045446\n",
      "Iteration: 7\t Loss value: 1302.58791495713\n",
      "Iteration: 8\t Loss value: 1194.78780492565\n",
      "Iteration: 9\t Loss value: 1098.13020855732\n",
      "Iteration: 10\t Loss value: 1011.46339084888\n",
      "Iteration: 1000\t Loss value: 258.373721118606\n",
      "Iteration: 2000\t Loss value: 257.10759589046\n",
      "Iteration: 3000\t Loss value: 255.892681655669\n",
      "Iteration: 4000\t Loss value: 254.726907082124\n",
      "Iteration: 5000\t Loss value: 253.608284616954\n",
      "Iteration: 6000\t Loss value: 252.534907097824\n",
      "Iteration: 7000\t Loss value: 251.504944501478\n",
      "Iteration: 8000\t Loss value: 250.516640823636\n",
      "Iteration: 9000\t Loss value: 249.568311085141\n"
     ]
    }
   ],
   "source": [
    "steps <- 9999\n",
    "L_numeric <- rep(Inf, steps)\n",
    "eta <- 1e-4\n",
    "b_numeric <- rep(0.0, 2)\n",
    "\n",
    "for (i in 1:steps){\n",
    "    b_numeric <- b_numeric - eta * grad(b_numeric, Loss, cars$speed, cars$dist)\n",
    "    L_numeric[i] <- Loss(b_numeric, cars$speed, cars$dist)\n",
    "    if(i %in% c(1:10) || i %% 1000 == 0){\n",
    "        cat(sprintf(\"Iteration: %s\\t Loss value: %s\\n\", i, L_numeric[i]))\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bf6b5f9e-7732-4811-819d-75a3c2dd9303",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 720
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "options(repr.plot.width=12, repr.plot.height=7)\n",
    "\n",
    "par(mfrow=c(1, 2))\n",
    "\n",
    "plot(x, y)\n",
    "abline(b_numeric, col=\"red\")\n",
    "\n",
    "plot(L_numeric, type=\"l\", col=\"dodgerblue\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae436c1d-9f3d-41cd-a976-54d3ab988370",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "<br><br><br>\n",
    "\n",
    "## Automatic differentiation\n",
    "\n",
    "The cornerstone of modern machine learning and data-science is to be able to perform **automatic differentiation**, i.e., being able to compute the gradients for **any** function without the need to solve tedious calculus problems. For the more advanced parts of the course (e.g., neural networks), we will be using automatic differentiation libraries to perform gradient descent. \n",
    "\n",
    "While there are several libraries for performing these tasks, we will be using the `pyTorch` library for this. The installation procedure can be found [here](https://cran.r-project.org/web/packages/torch/vignettes/installation.html)\n",
    "\n",
    "The basic steps are:\n",
    "```R\n",
    "renv::install(\"torch\")\n",
    "library(torch)\n",
    "torch::torch_install()\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8bdb766-b39d-4660-b068-d29becd3dff0",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Example 1:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4f980b21-cf2b-4ada-b380-7f198698fa3e",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch_tensor\n",
       " 2.4152\n",
       " 0.3064\n",
       "-0.9631\n",
       "-1.0799\n",
       "-0.2633\n",
       "[ CPUFloatType{5,1} ][ requires_grad = TRUE ]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x <- torch_randn(c(5, 1), requires_grad=TRUE)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7629aeb4-d5b5-4193-a99c-4c06b7ea7e05",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch_tensor\n",
       "34660.6\n",
       "[ CPUFloatType{} ][ grad_fn = <PowBackward0> ]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f <- function(x){\n",
    "    torch_norm(x)^10\n",
    "}\n",
    "\n",
    "y <- f(x)\n",
    "y\n",
    "y$backward()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce652bc1-c15a-4c82-8ee6-377d871497b8",
   "metadata": {},
   "source": [
    "$$\n",
    "\\frac{dy}{dx}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c7fb82ee-4af7-489c-b728-1e605401a2f8",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch_tensor\n",
       "1e+05 *\n",
       " 1.0347\n",
       "  0.1313\n",
       " -0.4126\n",
       " -0.4627\n",
       " -0.1128\n",
       "[ CPUFloatType{5,1} ]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x$grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "570fbfd5-555f-4146-a918-e6400f085900",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch_tensor\n",
       "1e+05 *\n",
       " 1.0347\n",
       "  0.1313\n",
       " -0.4126\n",
       " -0.4627\n",
       " -0.1128\n",
       "[ CPUFloatType{5,1} ][ grad_fn = <MulBackward0> ]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "(5 * torch_norm(x)^8) * (2 * x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21f36550-f61b-48ed-b75c-707299c242f9",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Example 2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "1c90e013-d185-4e3a-b205-155311e4fc08",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1]]\n",
       "torch_tensor\n",
       "-0.9080\n",
       "-0.8760\n",
       "-1.3794\n",
       " 1.2760\n",
       " 0.6258\n",
       "-0.8387\n",
       "-0.3117\n",
       " 0.2384\n",
       " 1.6395\n",
       "-0.0916\n",
       "[ CPUFloatType{10,1} ][ requires_grad = TRUE ]\n",
       "\n",
       "[[2]]\n",
       "torch_tensor\n",
       "-1.4486\n",
       " 0.4044\n",
       "-0.1827\n",
       "-1.9437\n",
       " 1.2226\n",
       " 0.0770\n",
       " 1.0074\n",
       " 0.0701\n",
       " 0.7298\n",
       "-1.9568\n",
       "[ CPUFloatType{10,1} ][ requires_grad = TRUE ]\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x <- torch_randn(c(10, 1), requires_grad=T)\n",
    "y <- torch_randn(c(10, 1), requires_grad=T)\n",
    "\n",
    "c(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ca840416-cc15-4627-acbf-aba5d28bae0b",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch_tensor\n",
       "0.512019\n",
       "[ CPUFloatType{} ][ grad_fn = <SumBackward0> ]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f <- function(x, y){\n",
    "    sum(x * y)\n",
    "}\n",
    "\n",
    "z <- f(x, y)\n",
    "z\n",
    "z$backward()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "1f2af71d-1f7f-4198-a354-01b63be0bc65",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1]]\n",
       "torch_tensor\n",
       "-1.4486\n",
       " 0.4044\n",
       "-0.1827\n",
       "-1.9437\n",
       " 1.2226\n",
       " 0.0770\n",
       " 1.0074\n",
       " 0.0701\n",
       " 0.7298\n",
       "-1.9568\n",
       "[ CPUFloatType{10,1} ]\n",
       "\n",
       "[[2]]\n",
       "torch_tensor\n",
       "-0.9080\n",
       "-0.8760\n",
       "-1.3794\n",
       " 1.2760\n",
       " 0.6258\n",
       "-0.8387\n",
       "-0.3117\n",
       " 0.2384\n",
       " 1.6395\n",
       "-0.0916\n",
       "[ CPUFloatType{10,1} ]\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c(x$grad, y$grad)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "279c1a5c-f70c-4aec-9fed-c64f748d2e9d",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1]]\n",
       "torch_tensor\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       "[ CPUFloatType{10,1} ][ grad_fn = <SubBackward0> ]\n",
       "\n",
       "[[2]]\n",
       "torch_tensor\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       " 0\n",
       "[ CPUFloatType{10,1} ][ grad_fn = <SubBackward0> ]\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c(x - y$grad, y - x$grad)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56bf1a76-48bb-40e5-be24-cb0f6c41c899",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Example 3:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5f8f726e-9f08-4975-a6c5-2beacc5bbb0a",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 720
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x <- torch_tensor(cars$speed, dtype = torch_float())\n",
    "y <- torch_tensor(cars$dist, dtype = torch_float())\n",
    "\n",
    "plot(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "235d5752-bd89-44af-a73e-a0a0db587410",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch_tensor\n",
       " 0\n",
       " 0\n",
       "[ CPUFloatType{2,1} ][ requires_grad = TRUE ]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "b <- torch_zeros(c(2,1), dtype=torch_float(), requires_grad = TRUE)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "619203bc-2e9f-4b71-8b0d-f41c6de4a1e5",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "loss <- nn_mse_loss()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "c388baa5-e60c-45db-9533-8cee231f6350",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration: 1\t Loss value: 2498.06005859375\n",
      "Iteration: 2\t Loss value: 1759.53002929688\n",
      "Iteration: 3\t Loss value: 1174.45300292969\n",
      "Iteration: 4\t Loss value: 742.353759765625\n",
      "Iteration: 5\t Loss value: 457.703643798828\n",
      "Iteration: 6\t Loss value: 307.684936523438\n",
      "Iteration: 7\t Loss value: 270.263397216797\n",
      "Iteration: 8\t Loss value: 314.067993164062\n",
      "Iteration: 9\t Loss value: 401.761566162109\n",
      "Iteration: 10\t Loss value: 496.908325195312\n",
      "Iteration: 200\t Loss value: 231.474166870117\n",
      "Iteration: 400\t Loss value: 227.114730834961\n",
      "Iteration: 600\t Loss value: 227.070495605469\n",
      "Iteration: 800\t Loss value: 227.070404052734\n",
      "Iteration: 1000\t Loss value: 227.070404052734\n",
      "Iteration: 1200\t Loss value: 227.070404052734\n",
      "Iteration: 1400\t Loss value: 227.070404052734\n",
      "Iteration: 1600\t Loss value: 227.070404052734\n",
      "Iteration: 1800\t Loss value: 227.070404052734\n",
      "Iteration: 2000\t Loss value: 227.070404052734\n",
      "Iteration: 2200\t Loss value: 227.070404052734\n",
      "Iteration: 2400\t Loss value: 227.070434570312\n",
      "Iteration: 2600\t Loss value: 227.070434570312\n",
      "Iteration: 2800\t Loss value: 227.070434570312\n",
      "Iteration: 3000\t Loss value: 227.070434570312\n",
      "Iteration: 3200\t Loss value: 227.070434570312\n",
      "Iteration: 3400\t Loss value: 227.070388793945\n",
      "Iteration: 3600\t Loss value: 227.070404052734\n",
      "Iteration: 3800\t Loss value: 227.070434570312\n",
      "Iteration: 4000\t Loss value: 227.070404052734\n",
      "Iteration: 4200\t Loss value: 227.070434570312\n",
      "Iteration: 4400\t Loss value: 227.070434570312\n",
      "Iteration: 4600\t Loss value: 227.070434570312\n",
      "Iteration: 4800\t Loss value: 227.070404052734\n",
      "Iteration: 5000\t Loss value: 227.070404052734\n",
      "Iteration: 5200\t Loss value: 227.132614135742\n",
      "Iteration: 5400\t Loss value: 227.070434570312\n",
      "Iteration: 5600\t Loss value: 227.070434570312\n",
      "Iteration: 5800\t Loss value: 227.071487426758\n",
      "Iteration: 6000\t Loss value: 227.070434570312\n",
      "Iteration: 6200\t Loss value: 227.070388793945\n",
      "Iteration: 6400\t Loss value: 227.070404052734\n",
      "Iteration: 6600\t Loss value: 227.070434570312\n",
      "Iteration: 6800\t Loss value: 227.070404052734\n",
      "Iteration: 7000\t Loss value: 227.352798461914\n",
      "Iteration: 7200\t Loss value: 227.070449829102\n",
      "Iteration: 7400\t Loss value: 227.070434570312\n",
      "Iteration: 7600\t Loss value: 227.070388793945\n",
      "Iteration: 7800\t Loss value: 227.070434570312\n",
      "Iteration: 8000\t Loss value: 227.070434570312\n",
      "Iteration: 8200\t Loss value: 227.070404052734\n",
      "Iteration: 8400\t Loss value: 227.070404052734\n",
      "Iteration: 8600\t Loss value: 227.479217529297\n",
      "Iteration: 8800\t Loss value: 227.070434570312\n",
      "Iteration: 9000\t Loss value: 227.070404052734\n",
      "Iteration: 9200\t Loss value: 227.070404052734\n",
      "Iteration: 9400\t Loss value: 227.071701049805\n",
      "Iteration: 9600\t Loss value: 227.070434570312\n",
      "Iteration: 9800\t Loss value: 227.070434570312\n",
      "Iteration: 10000\t Loss value: 227.070404052734\n"
     ]
    }
   ],
   "source": [
    "b <- torch_zeros(c(2,1), dtype=torch_float(), requires_grad = TRUE) # Initializing variables\n",
    "steps <- 10000 # Specifying the number of optimization steps\n",
    "L <- rep(Inf, steps) # Keeping track of the loss\n",
    "\n",
    "\n",
    "eta <- 0.5 # Specifying the learning rate and the optimizer\n",
    "optimizer <- optim_adam(b, lr=eta)\n",
    "\n",
    "\n",
    "# Gradient descent optimization over here\n",
    "for (i in 1:steps){\n",
    "    y_hat <- x * b[2] + b[1]\n",
    "    l <- loss(y_hat, y)\n",
    "    \n",
    "    L[i] <- l$item()\n",
    "    optimizer$zero_grad()\n",
    "    l$backward()\n",
    "    optimizer$step()\n",
    "    \n",
    "    if(i %in% c(1:10) || i %% 200 == 0){\n",
    "        cat(sprintf(\"Iteration: %s\\t Loss value: %s\\n\", i, L[i]))\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ba44b25f-9a42-470b-ae3d-630124d8efee",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 720
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "options(repr.plot.width=12, repr.plot.height=7)\n",
    "\n",
    "par(mfrow=c(1, 2))\n",
    "\n",
    "plot(x, y)\n",
    "abline(as_array(b), col=\"red\")\n",
    "\n",
    "plot(L, type=\"l\", col=\"dodgerblue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb189d95-19cf-45fc-b304-c28d71e544d9",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "ename": "",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31mFailed to start the Kernel. \n",
      "\u001b[1;31mJupyter server crashed. Unable to connect. \n",
      "\u001b[1;31mError code from Jupyter: 1\n",
      "\u001b[1;31mTraceback (most recent call last):\n",
      "\u001b[1;31m  File \"/storage/home/suv87/.local/bin/jupyter-notebook\", line 5, in <module>\n",
      "\u001b[1;31m\n",
      "\u001b[1;31m    from notebook.notebookapp import main\n",
      "\u001b[1;31m  File \"/storage/home/suv87/.local/lib/python3.11/site-packages/notebook/notebookapp.py\", line 59, in <module>\n",
      "\u001b[1;31m\n",
      "\u001b[1;31m    from tornado import httpserver\n",
      "\u001b[1;31m\n",
      "\u001b[1;31m  File \"/storage/home/suv87/.local/lib/python3.11/site-packages/tornado/httpserver.py\", line 29, in <module>\n",
      "\u001b[1;31m\n",
      "\u001b[1;31m    import ssl\n",
      "\u001b[1;31m\n",
      "\u001b[1;31m  File \"/storage/work/s/suv87/linuxbrew/.linuxbrew/opt/python@3.11/lib/python3.11/ssl.py\", line 100, in <module>\n",
      "\u001b[1;31m\n",
      "\u001b[1;31m    import _ssl             # if we can't import it, let the error propagate\n",
      "\u001b[1;31m\n",
      "\u001b[1;31m    ^^^^^^^^^^^\n",
      "\u001b[1;31mImportError: libssl.so.1.1: cannot open shared object file: No such file or directory. \n",
      "\u001b[1;31mView Jupyter <a href='command:jupyter.viewOutput'>log</a> for further details."
     ]
    }
   ],
   "source": [
    "plot(L_numeric[1:100], type=\"l\", col=\"red\")\n",
    "lines(L[1:100], col=\"blue\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72d067f0-2cb2-4e15-8a66-79972049108d",
   "metadata": {},
   "source": [
    "## Cross validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "76dd8055-4e80-4913-b7a9-86e870db27de",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A data.frame: 6 × 13</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>crim</th><th scope=col>zn</th><th scope=col>indus</th><th scope=col>chas</th><th scope=col>nox</th><th scope=col>rm</th><th scope=col>age</th><th scope=col>dis</th><th scope=col>rad</th><th scope=col>tax</th><th scope=col>ptratio</th><th scope=col>lstat</th><th scope=col>medv</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>0.00632</td><td>18</td><td>2.31</td><td>0</td><td>0.538</td><td>6.575</td><td>65.2</td><td>4.0900</td><td>1</td><td>296</td><td>15.3</td><td>4.98</td><td>24.0</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>0.02731</td><td> 0</td><td>7.07</td><td>0</td><td>0.469</td><td>6.421</td><td>78.9</td><td>4.9671</td><td>2</td><td>242</td><td>17.8</td><td>9.14</td><td>21.6</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>0.02729</td><td> 0</td><td>7.07</td><td>0</td><td>0.469</td><td>7.185</td><td>61.1</td><td>4.9671</td><td>2</td><td>242</td><td>17.8</td><td>4.03</td><td>34.7</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>0.03237</td><td> 0</td><td>2.18</td><td>0</td><td>0.458</td><td>6.998</td><td>45.8</td><td>6.0622</td><td>3</td><td>222</td><td>18.7</td><td>2.94</td><td>33.4</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>0.06905</td><td> 0</td><td>2.18</td><td>0</td><td>0.458</td><td>7.147</td><td>54.2</td><td>6.0622</td><td>3</td><td>222</td><td>18.7</td><td>5.33</td><td>36.2</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>0.02985</td><td> 0</td><td>2.18</td><td>0</td><td>0.458</td><td>6.430</td><td>58.7</td><td>6.0622</td><td>3</td><td>222</td><td>18.7</td><td>5.21</td><td>28.7</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 13\n",
       "\\begin{tabular}{r|lllllllllllll}\n",
       "  & crim & zn & indus & chas & nox & rm & age & dis & rad & tax & ptratio & lstat & medv\\\\\n",
       "  & <dbl> & <dbl> & <dbl> & <int> & <dbl> & <dbl> & <dbl> & <dbl> & <int> & <dbl> & <dbl> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t1 & 0.00632 & 18 & 2.31 & 0 & 0.538 & 6.575 & 65.2 & 4.0900 & 1 & 296 & 15.3 & 4.98 & 24.0\\\\\n",
       "\t2 & 0.02731 &  0 & 7.07 & 0 & 0.469 & 6.421 & 78.9 & 4.9671 & 2 & 242 & 17.8 & 9.14 & 21.6\\\\\n",
       "\t3 & 0.02729 &  0 & 7.07 & 0 & 0.469 & 7.185 & 61.1 & 4.9671 & 2 & 242 & 17.8 & 4.03 & 34.7\\\\\n",
       "\t4 & 0.03237 &  0 & 2.18 & 0 & 0.458 & 6.998 & 45.8 & 6.0622 & 3 & 222 & 18.7 & 2.94 & 33.4\\\\\n",
       "\t5 & 0.06905 &  0 & 2.18 & 0 & 0.458 & 7.147 & 54.2 & 6.0622 & 3 & 222 & 18.7 & 5.33 & 36.2\\\\\n",
       "\t6 & 0.02985 &  0 & 2.18 & 0 & 0.458 & 6.430 & 58.7 & 6.0622 & 3 & 222 & 18.7 & 5.21 & 28.7\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 13\n",
       "\n",
       "| <!--/--> | crim &lt;dbl&gt; | zn &lt;dbl&gt; | indus &lt;dbl&gt; | chas &lt;int&gt; | nox &lt;dbl&gt; | rm &lt;dbl&gt; | age &lt;dbl&gt; | dis &lt;dbl&gt; | rad &lt;int&gt; | tax &lt;dbl&gt; | ptratio &lt;dbl&gt; | lstat &lt;dbl&gt; | medv &lt;dbl&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | 0.00632 | 18 | 2.31 | 0 | 0.538 | 6.575 | 65.2 | 4.0900 | 1 | 296 | 15.3 | 4.98 | 24.0 |\n",
       "| 2 | 0.02731 |  0 | 7.07 | 0 | 0.469 | 6.421 | 78.9 | 4.9671 | 2 | 242 | 17.8 | 9.14 | 21.6 |\n",
       "| 3 | 0.02729 |  0 | 7.07 | 0 | 0.469 | 7.185 | 61.1 | 4.9671 | 2 | 242 | 17.8 | 4.03 | 34.7 |\n",
       "| 4 | 0.03237 |  0 | 2.18 | 0 | 0.458 | 6.998 | 45.8 | 6.0622 | 3 | 222 | 18.7 | 2.94 | 33.4 |\n",
       "| 5 | 0.06905 |  0 | 2.18 | 0 | 0.458 | 7.147 | 54.2 | 6.0622 | 3 | 222 | 18.7 | 5.33 | 36.2 |\n",
       "| 6 | 0.02985 |  0 | 2.18 | 0 | 0.458 | 6.430 | 58.7 | 6.0622 | 3 | 222 | 18.7 | 5.21 | 28.7 |\n",
       "\n"
      ],
      "text/plain": [
       "  crim    zn indus chas nox   rm    age  dis    rad tax ptratio lstat medv\n",
       "1 0.00632 18 2.31  0    0.538 6.575 65.2 4.0900 1   296 15.3    4.98  24.0\n",
       "2 0.02731  0 7.07  0    0.469 6.421 78.9 4.9671 2   242 17.8    9.14  21.6\n",
       "3 0.02729  0 7.07  0    0.469 7.185 61.1 4.9671 2   242 17.8    4.03  34.7\n",
       "4 0.03237  0 2.18  0    0.458 6.998 45.8 6.0622 3   222 18.7    2.94  33.4\n",
       "5 0.06905  0 2.18  0    0.458 7.147 54.2 6.0622 3   222 18.7    5.33  36.2\n",
       "6 0.02985  0 2.18  0    0.458 6.430 58.7 6.0622 3   222 18.7    5.21  28.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>506</li><li>13</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 506\n",
       "\\item 13\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 506\n",
       "2. 13\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 506  13"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df <- Boston %>% drop_na()\n",
    "head(df)\n",
    "dim(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d25871fb-1413-4fb4-9a08-53bf2c8bc709",
   "metadata": {},
   "source": [
    "Split the data into training (80%) and testing sets (20%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "548de704-9196-4be7-b4c4-4588460dd1e5",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>356</li><li>415</li><li>413</li><li>457</li><li>118</li><li>348</li><li>318</li><li>85</li><li>41</li><li>338</li><li>286</li><li>20</li><li>439</li><li>437</li><li>7</li><li>466</li><li>147</li><li>344</li><li>478</li><li>174</li><li>419</li><li>268</li><li>385</li><li>265</li><li>178</li><li>46</li><li>245</li><li>47</li><li>35</li><li>149</li><li>390</li><li>319</li><li>476</li><li>499</li><li>129</li><li>45</li><li>329</li><li>123</li><li>287</li><li>72</li><li>432</li><li>412</li><li>261</li><li>95</li><li>2</li><li>44</li><li>192</li><li>450</li><li>121</li><li>29</li><li>17</li><li>153</li><li>235</li><li>148</li><li>427</li><li>248</li><li>387</li><li>42</li><li>298</li><li>160</li><li>381</li><li>39</li><li>53</li><li>355</li><li>109</li><li>165</li><li>260</li><li>177</li><li>416</li><li>114</li><li>89</li><li>423</li><li>37</li><li>312</li><li>56</li><li>354</li><li>69</li><li>27</li><li>273</li><li>429</li><li>257</li><li>490</li><li>65</li><li>36</li><li>67</li><li>103</li><li>420</li><li>50</li><li>86</li><li>463</li><li>173</li><li>479</li><li>305</li><li>443</li><li>196</li><li>283</li><li>333</li><li>259</li><li>279</li><li>435</li><li>205</li><li>112</li><li>484</li><li>111</li><li>194</li><li>78</li><li>11</li><li>167</li><li>200</li><li>157</li><li>93</li><li>236</li><li>293</li><li>274</li><li>189</li><li>131</li><li>335</li><li>481</li><li>252</li><li>238</li><li>54</li><li>408</li><li>9</li><li>8</li><li>321</li><li>128</li><li>203</li><li>453</li><li>206</li><li>115</li><li>444</li><li>436</li><li>407</li><li>136</li><li>497</li><li>398</li><li>127</li><li>272</li><li>456</li><li>395</li><li>116</li><li>411</li><li>438</li><li>76</li><li>210</li><li>176</li><li>98</li><li>487</li><li>378</li><li>485</li><li>417</li><li>172</li><li>501</li><li>406</li><li>359</li><li>267</li><li>168</li><li>384</li><li>445</li><li>166</li><li>119</li><li>22</li><li>393</li><li>405</li><li>219</li><li>91</li><li>331</li><li>434</li><li>389</li><li>282</li><li>202</li><li>377</li><li>214</li><li>422</li><li>125</li><li>80</li><li>425</li><li>504</li><li>337</li><li>362</li><li>270</li><li>441</li><li>310</li><li>223</li><li>88</li><li>392</li><li>502</li><li>43</li><li>360</li><li>357</li><li>193</li><li>150</li><li>500</li><li>256</li><li>328</li><li>55</li><li>5</li><li>288</li><li>250</li><li>3</li><li>132</li><li>350</li><li>117</li><li>496</li><li>108</li><li>365</li><li>13</li><li>224</li><li>179</li><li>278</li><li>285</li><li>375</li><li>105</li><li>48</li><li>156</li><li>341</li><li>346</li><li>281</li><li>254</li><li>403</li><li>404</li><li>208</li><li>135</li><li>361</li><li>106</li><li>247</li><li>334</li><li>440</li><li>394</li><li>227</li><li>26</li><li>303</li><li>188</li><li>280</li><li>451</li><li>391</li><li>376</li><li>459</li><li>317</li><li>162</li><li>143</li><li>383</li><li>145</li><li>25</li><li>138</li><li>237</li><li>159</li><li>222</li><li>292</li><li>186</li><li>10</li><li>373</li><li>230</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 356\n",
       "\\item 415\n",
       "\\item 413\n",
       "\\item 457\n",
       "\\item 118\n",
       "\\item 348\n",
       "\\item 318\n",
       "\\item 85\n",
       "\\item 41\n",
       "\\item 338\n",
       "\\item 286\n",
       "\\item 20\n",
       "\\item 439\n",
       "\\item 437\n",
       "\\item 7\n",
       "\\item 466\n",
       "\\item 147\n",
       "\\item 344\n",
       "\\item 478\n",
       "\\item 174\n",
       "\\item 419\n",
       "\\item 268\n",
       "\\item 385\n",
       "\\item 265\n",
       "\\item 178\n",
       "\\item 46\n",
       "\\item 245\n",
       "\\item 47\n",
       "\\item 35\n",
       "\\item 149\n",
       "\\item 390\n",
       "\\item 319\n",
       "\\item 476\n",
       "\\item 499\n",
       "\\item 129\n",
       "\\item 45\n",
       "\\item 329\n",
       "\\item 123\n",
       "\\item 287\n",
       "\\item 72\n",
       "\\item 432\n",
       "\\item 412\n",
       "\\item 261\n",
       "\\item 95\n",
       "\\item 2\n",
       "\\item 44\n",
       "\\item 192\n",
       "\\item 450\n",
       "\\item 121\n",
       "\\item 29\n",
       "\\item 17\n",
       "\\item 153\n",
       "\\item 235\n",
       "\\item 148\n",
       "\\item 427\n",
       "\\item 248\n",
       "\\item 387\n",
       "\\item 42\n",
       "\\item 298\n",
       "\\item 160\n",
       "\\item 381\n",
       "\\item 39\n",
       "\\item 53\n",
       "\\item 355\n",
       "\\item 109\n",
       "\\item 165\n",
       "\\item 260\n",
       "\\item 177\n",
       "\\item 416\n",
       "\\item 114\n",
       "\\item 89\n",
       "\\item 423\n",
       "\\item 37\n",
       "\\item 312\n",
       "\\item 56\n",
       "\\item 354\n",
       "\\item 69\n",
       "\\item 27\n",
       "\\item 273\n",
       "\\item 429\n",
       "\\item 257\n",
       "\\item 490\n",
       "\\item 65\n",
       "\\item 36\n",
       "\\item 67\n",
       "\\item 103\n",
       "\\item 420\n",
       "\\item 50\n",
       "\\item 86\n",
       "\\item 463\n",
       "\\item 173\n",
       "\\item 479\n",
       "\\item 305\n",
       "\\item 443\n",
       "\\item 196\n",
       "\\item 283\n",
       "\\item 333\n",
       "\\item 259\n",
       "\\item 279\n",
       "\\item 435\n",
       "\\item 205\n",
       "\\item 112\n",
       "\\item 484\n",
       "\\item 111\n",
       "\\item 194\n",
       "\\item 78\n",
       "\\item 11\n",
       "\\item 167\n",
       "\\item 200\n",
       "\\item 157\n",
       "\\item 93\n",
       "\\item 236\n",
       "\\item 293\n",
       "\\item 274\n",
       "\\item 189\n",
       "\\item 131\n",
       "\\item 335\n",
       "\\item 481\n",
       "\\item 252\n",
       "\\item 238\n",
       "\\item 54\n",
       "\\item 408\n",
       "\\item 9\n",
       "\\item 8\n",
       "\\item 321\n",
       "\\item 128\n",
       "\\item 203\n",
       "\\item 453\n",
       "\\item 206\n",
       "\\item 115\n",
       "\\item 444\n",
       "\\item 436\n",
       "\\item 407\n",
       "\\item 136\n",
       "\\item 497\n",
       "\\item 398\n",
       "\\item 127\n",
       "\\item 272\n",
       "\\item 456\n",
       "\\item 395\n",
       "\\item 116\n",
       "\\item 411\n",
       "\\item 438\n",
       "\\item 76\n",
       "\\item 210\n",
       "\\item 176\n",
       "\\item 98\n",
       "\\item 487\n",
       "\\item 378\n",
       "\\item 485\n",
       "\\item 417\n",
       "\\item 172\n",
       "\\item 501\n",
       "\\item 406\n",
       "\\item 359\n",
       "\\item 267\n",
       "\\item 168\n",
       "\\item 384\n",
       "\\item 445\n",
       "\\item 166\n",
       "\\item 119\n",
       "\\item 22\n",
       "\\item 393\n",
       "\\item 405\n",
       "\\item 219\n",
       "\\item 91\n",
       "\\item 331\n",
       "\\item 434\n",
       "\\item 389\n",
       "\\item 282\n",
       "\\item 202\n",
       "\\item 377\n",
       "\\item 214\n",
       "\\item 422\n",
       "\\item 125\n",
       "\\item 80\n",
       "\\item 425\n",
       "\\item 504\n",
       "\\item 337\n",
       "\\item 362\n",
       "\\item 270\n",
       "\\item 441\n",
       "\\item 310\n",
       "\\item 223\n",
       "\\item 88\n",
       "\\item 392\n",
       "\\item 502\n",
       "\\item 43\n",
       "\\item 360\n",
       "\\item 357\n",
       "\\item 193\n",
       "\\item 150\n",
       "\\item 500\n",
       "\\item 256\n",
       "\\item 328\n",
       "\\item 55\n",
       "\\item 5\n",
       "\\item 288\n",
       "\\item 250\n",
       "\\item 3\n",
       "\\item 132\n",
       "\\item 350\n",
       "\\item 117\n",
       "\\item 496\n",
       "\\item 108\n",
       "\\item 365\n",
       "\\item 13\n",
       "\\item 224\n",
       "\\item 179\n",
       "\\item 278\n",
       "\\item 285\n",
       "\\item 375\n",
       "\\item 105\n",
       "\\item 48\n",
       "\\item 156\n",
       "\\item 341\n",
       "\\item 346\n",
       "\\item 281\n",
       "\\item 254\n",
       "\\item 403\n",
       "\\item 404\n",
       "\\item 208\n",
       "\\item 135\n",
       "\\item 361\n",
       "\\item 106\n",
       "\\item 247\n",
       "\\item 334\n",
       "\\item 440\n",
       "\\item 394\n",
       "\\item 227\n",
       "\\item 26\n",
       "\\item 303\n",
       "\\item 188\n",
       "\\item 280\n",
       "\\item 451\n",
       "\\item 391\n",
       "\\item 376\n",
       "\\item 459\n",
       "\\item 317\n",
       "\\item 162\n",
       "\\item 143\n",
       "\\item 383\n",
       "\\item 145\n",
       "\\item 25\n",
       "\\item 138\n",
       "\\item 237\n",
       "\\item 159\n",
       "\\item 222\n",
       "\\item 292\n",
       "\\item 186\n",
       "\\item 10\n",
       "\\item 373\n",
       "\\item 230\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 356\n",
       "2. 415\n",
       "3. 413\n",
       "4. 457\n",
       "5. 118\n",
       "6. 348\n",
       "7. 318\n",
       "8. 85\n",
       "9. 41\n",
       "10. 338\n",
       "11. 286\n",
       "12. 20\n",
       "13. 439\n",
       "14. 437\n",
       "15. 7\n",
       "16. 466\n",
       "17. 147\n",
       "18. 344\n",
       "19. 478\n",
       "20. 174\n",
       "21. 419\n",
       "22. 268\n",
       "23. 385\n",
       "24. 265\n",
       "25. 178\n",
       "26. 46\n",
       "27. 245\n",
       "28. 47\n",
       "29. 35\n",
       "30. 149\n",
       "31. 390\n",
       "32. 319\n",
       "33. 476\n",
       "34. 499\n",
       "35. 129\n",
       "36. 45\n",
       "37. 329\n",
       "38. 123\n",
       "39. 287\n",
       "40. 72\n",
       "41. 432\n",
       "42. 412\n",
       "43. 261\n",
       "44. 95\n",
       "45. 2\n",
       "46. 44\n",
       "47. 192\n",
       "48. 450\n",
       "49. 121\n",
       "50. 29\n",
       "51. 17\n",
       "52. 153\n",
       "53. 235\n",
       "54. 148\n",
       "55. 427\n",
       "56. 248\n",
       "57. 387\n",
       "58. 42\n",
       "59. 298\n",
       "60. 160\n",
       "61. 381\n",
       "62. 39\n",
       "63. 53\n",
       "64. 355\n",
       "65. 109\n",
       "66. 165\n",
       "67. 260\n",
       "68. 177\n",
       "69. 416\n",
       "70. 114\n",
       "71. 89\n",
       "72. 423\n",
       "73. 37\n",
       "74. 312\n",
       "75. 56\n",
       "76. 354\n",
       "77. 69\n",
       "78. 27\n",
       "79. 273\n",
       "80. 429\n",
       "81. 257\n",
       "82. 490\n",
       "83. 65\n",
       "84. 36\n",
       "85. 67\n",
       "86. 103\n",
       "87. 420\n",
       "88. 50\n",
       "89. 86\n",
       "90. 463\n",
       "91. 173\n",
       "92. 479\n",
       "93. 305\n",
       "94. 443\n",
       "95. 196\n",
       "96. 283\n",
       "97. 333\n",
       "98. 259\n",
       "99. 279\n",
       "100. 435\n",
       "101. 205\n",
       "102. 112\n",
       "103. 484\n",
       "104. 111\n",
       "105. 194\n",
       "106. 78\n",
       "107. 11\n",
       "108. 167\n",
       "109. 200\n",
       "110. 157\n",
       "111. 93\n",
       "112. 236\n",
       "113. 293\n",
       "114. 274\n",
       "115. 189\n",
       "116. 131\n",
       "117. 335\n",
       "118. 481\n",
       "119. 252\n",
       "120. 238\n",
       "121. 54\n",
       "122. 408\n",
       "123. 9\n",
       "124. 8\n",
       "125. 321\n",
       "126. 128\n",
       "127. 203\n",
       "128. 453\n",
       "129. 206\n",
       "130. 115\n",
       "131. 444\n",
       "132. 436\n",
       "133. 407\n",
       "134. 136\n",
       "135. 497\n",
       "136. 398\n",
       "137. 127\n",
       "138. 272\n",
       "139. 456\n",
       "140. 395\n",
       "141. 116\n",
       "142. 411\n",
       "143. 438\n",
       "144. 76\n",
       "145. 210\n",
       "146. 176\n",
       "147. 98\n",
       "148. 487\n",
       "149. 378\n",
       "150. 485\n",
       "151. 417\n",
       "152. 172\n",
       "153. 501\n",
       "154. 406\n",
       "155. 359\n",
       "156. 267\n",
       "157. 168\n",
       "158. 384\n",
       "159. 445\n",
       "160. 166\n",
       "161. 119\n",
       "162. 22\n",
       "163. 393\n",
       "164. 405\n",
       "165. 219\n",
       "166. 91\n",
       "167. 331\n",
       "168. 434\n",
       "169. 389\n",
       "170. 282\n",
       "171. 202\n",
       "172. 377\n",
       "173. 214\n",
       "174. 422\n",
       "175. 125\n",
       "176. 80\n",
       "177. 425\n",
       "178. 504\n",
       "179. 337\n",
       "180. 362\n",
       "181. 270\n",
       "182. 441\n",
       "183. 310\n",
       "184. 223\n",
       "185. 88\n",
       "186. 392\n",
       "187. 502\n",
       "188. 43\n",
       "189. 360\n",
       "190. 357\n",
       "191. 193\n",
       "192. 150\n",
       "193. 500\n",
       "194. 256\n",
       "195. 328\n",
       "196. 55\n",
       "197. 5\n",
       "198. 288\n",
       "199. 250\n",
       "200. 3\n",
       "201. 132\n",
       "202. 350\n",
       "203. 117\n",
       "204. 496\n",
       "205. 108\n",
       "206. 365\n",
       "207. 13\n",
       "208. 224\n",
       "209. 179\n",
       "210. 278\n",
       "211. 285\n",
       "212. 375\n",
       "213. 105\n",
       "214. 48\n",
       "215. 156\n",
       "216. 341\n",
       "217. 346\n",
       "218. 281\n",
       "219. 254\n",
       "220. 403\n",
       "221. 404\n",
       "222. 208\n",
       "223. 135\n",
       "224. 361\n",
       "225. 106\n",
       "226. 247\n",
       "227. 334\n",
       "228. 440\n",
       "229. 394\n",
       "230. 227\n",
       "231. 26\n",
       "232. 303\n",
       "233. 188\n",
       "234. 280\n",
       "235. 451\n",
       "236. 391\n",
       "237. 376\n",
       "238. 459\n",
       "239. 317\n",
       "240. 162\n",
       "241. 143\n",
       "242. 383\n",
       "243. 145\n",
       "244. 25\n",
       "245. 138\n",
       "246. 237\n",
       "247. 159\n",
       "248. 222\n",
       "249. 292\n",
       "250. 186\n",
       "251. 10\n",
       "252. 373\n",
       "253. 230\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "  [1] 356 415 413 457 118 348 318  85  41 338 286  20 439 437   7 466 147 344\n",
       " [19] 478 174 419 268 385 265 178  46 245  47  35 149 390 319 476 499 129  45\n",
       " [37] 329 123 287  72 432 412 261  95   2  44 192 450 121  29  17 153 235 148\n",
       " [55] 427 248 387  42 298 160 381  39  53 355 109 165 260 177 416 114  89 423\n",
       " [73]  37 312  56 354  69  27 273 429 257 490  65  36  67 103 420  50  86 463\n",
       " [91] 173 479 305 443 196 283 333 259 279 435 205 112 484 111 194  78  11 167\n",
       "[109] 200 157  93 236 293 274 189 131 335 481 252 238  54 408   9   8 321 128\n",
       "[127] 203 453 206 115 444 436 407 136 497 398 127 272 456 395 116 411 438  76\n",
       "[145] 210 176  98 487 378 485 417 172 501 406 359 267 168 384 445 166 119  22\n",
       "[163] 393 405 219  91 331 434 389 282 202 377 214 422 125  80 425 504 337 362\n",
       "[181] 270 441 310 223  88 392 502  43 360 357 193 150 500 256 328  55   5 288\n",
       "[199] 250   3 132 350 117 496 108 365  13 224 179 278 285 375 105  48 156 341\n",
       "[217] 346 281 254 403 404 208 135 361 106 247 334 440 394 227  26 303 188 280\n",
       "[235] 451 391 376 459 317 162 143 383 145  25 138 237 159 222 292 186  10 373\n",
       "[253] 230"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "k <- 5\n",
    "fold <- sample(1:nrow(df), nrow(df)/2)\n",
    "fold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "abe016ae-1b9b-4e82-8e8b-829908986907",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "train <- df %>% slice(-fold)\n",
    "test  <- df %>% slice(fold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "f84efc20-6a05-4dae-8861-ebdf4bf0c128",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "0"
      ],
      "text/latex": [
       "0"
      ],
      "text/markdown": [
       "0"
      ],
      "text/plain": [
       "[1] 0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nrow(test) + nrow(train) - nrow(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "1de6ca79-de33-4080-9490-302405c33a60",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\n",
       "Call:\n",
       "lm(formula = medv ~ ., data = train)\n",
       "\n",
       "Residuals:\n",
       "    Min      1Q  Median      3Q     Max \n",
       "-9.3604 -2.8256 -0.5806  1.9599 28.0532 \n",
       "\n",
       "Coefficients:\n",
       "              Estimate Std. Error t value Pr(>|t|)    \n",
       "(Intercept)  36.388718   7.134369   5.100 6.88e-07 ***\n",
       "crim         -0.144808   0.036690  -3.947 0.000104 ***\n",
       "zn            0.057871   0.018923   3.058 0.002479 ** \n",
       "indus        -0.030654   0.079143  -0.387 0.698863    \n",
       "chas          3.460602   1.150260   3.009 0.002905 ** \n",
       "nox         -15.901602   5.326724  -2.985 0.003127 ** \n",
       "rm            4.271787   0.638517   6.690 1.56e-10 ***\n",
       "age          -0.008753   0.018832  -0.465 0.642491    \n",
       "dis          -1.702822   0.302292  -5.633 4.94e-08 ***\n",
       "rad           0.364424   0.096950   3.759 0.000214 ***\n",
       "tax          -0.017174   0.005351  -3.209 0.001511 ** \n",
       "ptratio      -0.840480   0.177538  -4.734 3.76e-06 ***\n",
       "lstat        -0.478857   0.077124  -6.209 2.33e-09 ***\n",
       "---\n",
       "Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n",
       "\n",
       "Residual standard error: 4.681 on 240 degrees of freedom\n",
       "Multiple R-squared:  0.7446,\tAdjusted R-squared:  0.7318 \n",
       "F-statistic:  58.3 on 12 and 240 DF,  p-value: < 2.2e-16\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model <- lm(medv ~ ., data = train)\n",
    "summary(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "4fc74a7e-3140-4ffa-be46-81cb7e96af33",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "y_test <- predict(model, newdata = test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "e4fee563-0d65-44ca-8285-adfe968db56f",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "25.0246841591295"
      ],
      "text/latex": [
       "25.0246841591295"
      ],
      "text/markdown": [
       "25.0246841591295"
      ],
      "text/plain": [
       "[1] 25.02468"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mspe <- mean((test$medv - y_test)^2)\n",
    "mspe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c54c0169-5df9-43a0-a34e-b1e96733d2cd",
   "metadata": {},
   "source": [
    "## k-Fold Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "461e46c7-d6ee-4a93-b650-2245c3c2a6c1",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2</li><li>5</li><li>5</li><li>2</li><li>3</li><li>4</li><li>1</li><li>2</li><li>2</li><li>5</li><li>3</li><li>4</li><li>5</li><li>4</li><li>4</li><li>3</li><li>4</li><li>5</li><li>4</li><li>2</li><li>5</li><li>5</li><li>3</li><li>2</li><li>5</li><li>2</li><li>3</li><li>1</li><li>4</li><li>4</li><li>3</li><li>3</li><li>1</li><li>4</li><li>5</li><li>2</li><li>5</li><li>4</li><li>2</li><li>2</li><li>1</li><li>3</li><li>1</li><li>4</li><li>1</li><li>1</li><li>4</li><li>1</li><li>5</li><li>3</li><li>4</li><li>2</li><li>5</li><li>1</li><li>2</li><li>1</li><li>3</li><li>4</li><li>3</li><li>4</li><li>1</li><li>3</li><li>2</li><li>3</li><li>3</li><li>4</li><li>2</li><li>3</li><li>2</li><li>4</li><li>2</li><li>5</li><li>5</li><li>4</li><li>1</li><li>3</li><li>5</li><li>3</li><li>5</li><li>4</li><li>3</li><li>1</li><li>3</li><li>1</li><li>1</li><li>2</li><li>3</li><li>4</li><li>2</li><li>3</li><li>5</li><li>2</li><li>1</li><li>5</li><li>2</li><li>1</li><li>3</li><li>5</li><li>2</li><li>3</li><li>5</li><li>2</li><li>5</li><li>1</li><li>3</li><li>1</li><li>5</li><li>5</li><li>5</li><li>1</li><li>1</li><li>4</li><li>3</li><li>2</li><li>4</li><li>1</li><li>4</li><li>5</li><li>4</li><li>1</li><li>4</li><li>1</li><li>3</li><li>1</li><li>5</li><li>2</li><li>3</li><li>3</li><li>3</li><li>1</li><li>2</li><li>4</li><li>2</li><li>5</li><li>1</li><li>1</li><li>1</li><li>1</li><li>2</li><li>4</li><li>1</li><li>3</li><li>1</li><li>1</li><li>5</li><li>4</li><li>3</li><li>1</li><li>2</li><li>3</li><li>1</li><li>3</li><li>3</li><li>5</li><li>3</li><li>4</li><li>5</li><li>3</li><li>5</li><li>5</li><li>1</li><li>1</li><li>3</li><li>5</li><li>5</li><li>4</li><li>5</li><li>1</li><li>2</li><li>4</li><li>2</li><li>4</li><li>4</li><li>3</li><li>3</li><li>4</li><li>4</li><li>1</li><li>5</li><li>1</li><li>5</li><li>2</li><li>2</li><li>5</li><li>4</li><li>5</li><li>2</li><li>5</li><li>5</li><li>1</li><li>1</li><li>4</li><li>3</li><li>3</li><li>1</li><li>2</li><li>2</li><li>1</li><li>2</li><li>5</li><li>⋯</li><li>4</li><li>3</li><li>1</li><li>2</li><li>3</li><li>4</li><li>1</li><li>3</li><li>4</li><li>3</li><li>5</li><li>3</li><li>5</li><li>4</li><li>2</li><li>2</li><li>3</li><li>2</li><li>2</li><li>1</li><li>5</li><li>1</li><li>1</li><li>1</li><li>1</li><li>2</li><li>5</li><li>3</li><li>5</li><li>2</li><li>2</li><li>2</li><li>5</li><li>2</li><li>1</li><li>1</li><li>2</li><li>5</li><li>1</li><li>2</li><li>5</li><li>5</li><li>4</li><li>2</li><li>1</li><li>1</li><li>3</li><li>4</li><li>4</li><li>3</li><li>5</li><li>3</li><li>1</li><li>1</li><li>3</li><li>1</li><li>3</li><li>4</li><li>2</li><li>3</li><li>4</li><li>5</li><li>4</li><li>4</li><li>2</li><li>4</li><li>5</li><li>3</li><li>3</li><li>5</li><li>2</li><li>1</li><li>2</li><li>5</li><li>1</li><li>5</li><li>5</li><li>5</li><li>4</li><li>3</li><li>2</li><li>2</li><li>1</li><li>5</li><li>5</li><li>2</li><li>2</li><li>1</li><li>5</li><li>4</li><li>2</li><li>1</li><li>2</li><li>2</li><li>2</li><li>4</li><li>3</li><li>4</li><li>1</li><li>1</li><li>2</li><li>5</li><li>2</li><li>3</li><li>1</li><li>4</li><li>3</li><li>3</li><li>2</li><li>1</li><li>1</li><li>5</li><li>1</li><li>4</li><li>2</li><li>4</li><li>5</li><li>2</li><li>3</li><li>4</li><li>2</li><li>2</li><li>4</li><li>3</li><li>3</li><li>3</li><li>4</li><li>5</li><li>4</li><li>1</li><li>2</li><li>5</li><li>1</li><li>1</li><li>2</li><li>2</li><li>4</li><li>5</li><li>2</li><li>3</li><li>3</li><li>3</li><li>4</li><li>5</li><li>3</li><li>5</li><li>4</li><li>3</li><li>5</li><li>1</li><li>3</li><li>1</li><li>3</li><li>5</li><li>2</li><li>5</li><li>1</li><li>1</li><li>3</li><li>1</li><li>3</li><li>2</li><li>2</li><li>4</li><li>1</li><li>5</li><li>4</li><li>1</li><li>1</li><li>1</li><li>3</li><li>4</li><li>5</li><li>4</li><li>3</li><li>2</li><li>4</li><li>1</li><li>2</li><li>3</li><li>1</li><li>5</li><li>3</li><li>5</li><li>1</li><li>2</li><li>3</li><li>5</li><li>4</li><li>1</li><li>3</li><li>3</li><li>5</li><li>1</li><li>2</li><li>5</li><li>2</li><li>5</li><li>2</li><li>3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item ⋯\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 5\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2\n",
       "2. 5\n",
       "3. 5\n",
       "4. 2\n",
       "5. 3\n",
       "6. 4\n",
       "7. 1\n",
       "8. 2\n",
       "9. 2\n",
       "10. 5\n",
       "11. 3\n",
       "12. 4\n",
       "13. 5\n",
       "14. 4\n",
       "15. 4\n",
       "16. 3\n",
       "17. 4\n",
       "18. 5\n",
       "19. 4\n",
       "20. 2\n",
       "21. 5\n",
       "22. 5\n",
       "23. 3\n",
       "24. 2\n",
       "25. 5\n",
       "26. 2\n",
       "27. 3\n",
       "28. 1\n",
       "29. 4\n",
       "30. 4\n",
       "31. 3\n",
       "32. 3\n",
       "33. 1\n",
       "34. 4\n",
       "35. 5\n",
       "36. 2\n",
       "37. 5\n",
       "38. 4\n",
       "39. 2\n",
       "40. 2\n",
       "41. 1\n",
       "42. 3\n",
       "43. 1\n",
       "44. 4\n",
       "45. 1\n",
       "46. 1\n",
       "47. 4\n",
       "48. 1\n",
       "49. 5\n",
       "50. 3\n",
       "51. 4\n",
       "52. 2\n",
       "53. 5\n",
       "54. 1\n",
       "55. 2\n",
       "56. 1\n",
       "57. 3\n",
       "58. 4\n",
       "59. 3\n",
       "60. 4\n",
       "61. 1\n",
       "62. 3\n",
       "63. 2\n",
       "64. 3\n",
       "65. 3\n",
       "66. 4\n",
       "67. 2\n",
       "68. 3\n",
       "69. 2\n",
       "70. 4\n",
       "71. 2\n",
       "72. 5\n",
       "73. 5\n",
       "74. 4\n",
       "75. 1\n",
       "76. 3\n",
       "77. 5\n",
       "78. 3\n",
       "79. 5\n",
       "80. 4\n",
       "81. 3\n",
       "82. 1\n",
       "83. 3\n",
       "84. 1\n",
       "85. 1\n",
       "86. 2\n",
       "87. 3\n",
       "88. 4\n",
       "89. 2\n",
       "90. 3\n",
       "91. 5\n",
       "92. 2\n",
       "93. 1\n",
       "94. 5\n",
       "95. 2\n",
       "96. 1\n",
       "97. 3\n",
       "98. 5\n",
       "99. 2\n",
       "100. 3\n",
       "101. 5\n",
       "102. 2\n",
       "103. 5\n",
       "104. 1\n",
       "105. 3\n",
       "106. 1\n",
       "107. 5\n",
       "108. 5\n",
       "109. 5\n",
       "110. 1\n",
       "111. 1\n",
       "112. 4\n",
       "113. 3\n",
       "114. 2\n",
       "115. 4\n",
       "116. 1\n",
       "117. 4\n",
       "118. 5\n",
       "119. 4\n",
       "120. 1\n",
       "121. 4\n",
       "122. 1\n",
       "123. 3\n",
       "124. 1\n",
       "125. 5\n",
       "126. 2\n",
       "127. 3\n",
       "128. 3\n",
       "129. 3\n",
       "130. 1\n",
       "131. 2\n",
       "132. 4\n",
       "133. 2\n",
       "134. 5\n",
       "135. 1\n",
       "136. 1\n",
       "137. 1\n",
       "138. 1\n",
       "139. 2\n",
       "140. 4\n",
       "141. 1\n",
       "142. 3\n",
       "143. 1\n",
       "144. 1\n",
       "145. 5\n",
       "146. 4\n",
       "147. 3\n",
       "148. 1\n",
       "149. 2\n",
       "150. 3\n",
       "151. 1\n",
       "152. 3\n",
       "153. 3\n",
       "154. 5\n",
       "155. 3\n",
       "156. 4\n",
       "157. 5\n",
       "158. 3\n",
       "159. 5\n",
       "160. 5\n",
       "161. 1\n",
       "162. 1\n",
       "163. 3\n",
       "164. 5\n",
       "165. 5\n",
       "166. 4\n",
       "167. 5\n",
       "168. 1\n",
       "169. 2\n",
       "170. 4\n",
       "171. 2\n",
       "172. 4\n",
       "173. 4\n",
       "174. 3\n",
       "175. 3\n",
       "176. 4\n",
       "177. 4\n",
       "178. 1\n",
       "179. 5\n",
       "180. 1\n",
       "181. 5\n",
       "182. 2\n",
       "183. 2\n",
       "184. 5\n",
       "185. 4\n",
       "186. 5\n",
       "187. 2\n",
       "188. 5\n",
       "189. 5\n",
       "190. 1\n",
       "191. 1\n",
       "192. 4\n",
       "193. 3\n",
       "194. 3\n",
       "195. 1\n",
       "196. 2\n",
       "197. 2\n",
       "198. 1\n",
       "199. 2\n",
       "200. 5\n",
       "201. ⋯\n",
       "202. 4\n",
       "203. 3\n",
       "204. 1\n",
       "205. 2\n",
       "206. 3\n",
       "207. 4\n",
       "208. 1\n",
       "209. 3\n",
       "210. 4\n",
       "211. 3\n",
       "212. 5\n",
       "213. 3\n",
       "214. 5\n",
       "215. 4\n",
       "216. 2\n",
       "217. 2\n",
       "218. 3\n",
       "219. 2\n",
       "220. 2\n",
       "221. 1\n",
       "222. 5\n",
       "223. 1\n",
       "224. 1\n",
       "225. 1\n",
       "226. 1\n",
       "227. 2\n",
       "228. 5\n",
       "229. 3\n",
       "230. 5\n",
       "231. 2\n",
       "232. 2\n",
       "233. 2\n",
       "234. 5\n",
       "235. 2\n",
       "236. 1\n",
       "237. 1\n",
       "238. 2\n",
       "239. 5\n",
       "240. 1\n",
       "241. 2\n",
       "242. 5\n",
       "243. 5\n",
       "244. 4\n",
       "245. 2\n",
       "246. 1\n",
       "247. 1\n",
       "248. 3\n",
       "249. 4\n",
       "250. 4\n",
       "251. 3\n",
       "252. 5\n",
       "253. 3\n",
       "254. 1\n",
       "255. 1\n",
       "256. 3\n",
       "257. 1\n",
       "258. 3\n",
       "259. 4\n",
       "260. 2\n",
       "261. 3\n",
       "262. 4\n",
       "263. 5\n",
       "264. 4\n",
       "265. 4\n",
       "266. 2\n",
       "267. 4\n",
       "268. 5\n",
       "269. 3\n",
       "270. 3\n",
       "271. 5\n",
       "272. 2\n",
       "273. 1\n",
       "274. 2\n",
       "275. 5\n",
       "276. 1\n",
       "277. 5\n",
       "278. 5\n",
       "279. 5\n",
       "280. 4\n",
       "281. 3\n",
       "282. 2\n",
       "283. 2\n",
       "284. 1\n",
       "285. 5\n",
       "286. 5\n",
       "287. 2\n",
       "288. 2\n",
       "289. 1\n",
       "290. 5\n",
       "291. 4\n",
       "292. 2\n",
       "293. 1\n",
       "294. 2\n",
       "295. 2\n",
       "296. 2\n",
       "297. 4\n",
       "298. 3\n",
       "299. 4\n",
       "300. 1\n",
       "301. 1\n",
       "302. 2\n",
       "303. 5\n",
       "304. 2\n",
       "305. 3\n",
       "306. 1\n",
       "307. 4\n",
       "308. 3\n",
       "309. 3\n",
       "310. 2\n",
       "311. 1\n",
       "312. 1\n",
       "313. 5\n",
       "314. 1\n",
       "315. 4\n",
       "316. 2\n",
       "317. 4\n",
       "318. 5\n",
       "319. 2\n",
       "320. 3\n",
       "321. 4\n",
       "322. 2\n",
       "323. 2\n",
       "324. 4\n",
       "325. 3\n",
       "326. 3\n",
       "327. 3\n",
       "328. 4\n",
       "329. 5\n",
       "330. 4\n",
       "331. 1\n",
       "332. 2\n",
       "333. 5\n",
       "334. 1\n",
       "335. 1\n",
       "336. 2\n",
       "337. 2\n",
       "338. 4\n",
       "339. 5\n",
       "340. 2\n",
       "341. 3\n",
       "342. 3\n",
       "343. 3\n",
       "344. 4\n",
       "345. 5\n",
       "346. 3\n",
       "347. 5\n",
       "348. 4\n",
       "349. 3\n",
       "350. 5\n",
       "351. 1\n",
       "352. 3\n",
       "353. 1\n",
       "354. 3\n",
       "355. 5\n",
       "356. 2\n",
       "357. 5\n",
       "358. 1\n",
       "359. 1\n",
       "360. 3\n",
       "361. 1\n",
       "362. 3\n",
       "363. 2\n",
       "364. 2\n",
       "365. 4\n",
       "366. 1\n",
       "367. 5\n",
       "368. 4\n",
       "369. 1\n",
       "370. 1\n",
       "371. 1\n",
       "372. 3\n",
       "373. 4\n",
       "374. 5\n",
       "375. 4\n",
       "376. 3\n",
       "377. 2\n",
       "378. 4\n",
       "379. 1\n",
       "380. 2\n",
       "381. 3\n",
       "382. 1\n",
       "383. 5\n",
       "384. 3\n",
       "385. 5\n",
       "386. 1\n",
       "387. 2\n",
       "388. 3\n",
       "389. 5\n",
       "390. 4\n",
       "391. 1\n",
       "392. 3\n",
       "393. 3\n",
       "394. 5\n",
       "395. 1\n",
       "396. 2\n",
       "397. 5\n",
       "398. 2\n",
       "399. 5\n",
       "400. 2\n",
       "401. 3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "  [1] 2 5 5 2 3 4 1 2 2 5 3 4 5 4 4 3 4 5 4 2 5 5 3 2 5 2 3 1 4 4 3 3 1 4 5 2 5\n",
       " [38] 4 2 2 1 3 1 4 1 1 4 1 5 3 4 2 5 1 2 1 3 4 3 4 1 3 2 3 3 4 2 3 2 4 2 5 5 4\n",
       " [75] 1 3 5 3 5 4 3 1 3 1 1 2 3 4 2 3 5 2 1 5 2 1 3 5 2 3 5 2 5 1 3 1 5 5 5 1 1\n",
       "[112] 4 3 2 4 1 4 5 4 1 4 1 3 1 5 2 3 3 3 1 2 4 2 5 1 1 1 1 2 4 1 3 1 1 5 4 3 1\n",
       "[149] 2 3 1 3 3 5 3 4 5 3 5 5 1 1 3 5 5 4 5 1 2 4 2 4 4 3 3 4 4 1 5 1 5 2 2 5 4\n",
       "[186] 5 2 5 5 1 1 4 3 3 1 2 2 1 2 5 1 4 3 1 3 3 1 2 3 1 4 3 2 5 4 1 1 1 5 2 1 2\n",
       "[223] 1 3 3 2 2 3 5 3 5 1 3 3 3 1 2 5 4 2 2 3 4 4 1 2 5 4 5 2 3 5 1 5 5 3 4 1 4\n",
       "[260] 4 1 3 3 5 5 4 1 2 2 3 5 2 2 2 4 2 1 3 2 3 4 3 2 3 5 2 4 3 5 3 3 5 3 4 5 2\n",
       "[297] 5 2 5 3 5 3 4 4 3 2 4 3 1 2 3 4 1 3 4 3 5 3 5 4 2 2 3 2 2 1 5 1 1 1 1 2 5\n",
       "[334] 3 5 2 2 2 5 2 1 1 2 5 1 2 5 5 4 2 1 1 3 4 4 3 5 3 1 1 3 1 3 4 2 3 4 5 4 4\n",
       "[371] 2 4 5 3 3 5 2 1 2 5 1 5 5 5 4 3 2 2 1 5 5 2 2 1 5 4 2 1 2 2 2 4 3 4 1 1 2\n",
       "[408] 5 2 3 1 4 3 3 2 1 1 5 1 4 2 4 5 2 3 4 2 2 4 3 3 3 4 5 4 1 2 5 1 1 2 2 4 5\n",
       "[445] 2 3 3 3 4 5 3 5 4 3 5 1 3 1 3 5 2 5 1 1 3 1 3 2 2 4 1 5 4 1 1 1 3 4 5 4 3\n",
       "[482] 2 4 1 2 3 1 5 3 5 1 2 3 5 4 1 3 3 5 1 2 5 2 5 2 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "k <- 5\n",
    "folds <- sample(1:k, nrow(df), replace=T)\n",
    "folds\n",
    "\n",
    "\n",
    "df_folds <- list()\n",
    "\n",
    "\n",
    "\n",
    "for(i in 1:k){\n",
    "    \n",
    "    df_folds[[i]] <- list()\n",
    "    \n",
    "    df_folds[[i]]$train = df[which(folds != i), ]\n",
    "    \n",
    "    df_folds[[i]]$test = df[which(folds == i), ]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "300f496b-9c62-4d52-8ef2-7313fcfe0ecd",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "nrow(df_folds[[2]]$train) + nrow(df_folds[[2]]$test) - nrow(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7582a273-2894-4c67-bbf3-48d409e2371d",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "nrow(df_folds[[3]]$train) + nrow(df_folds[[4]]$test) - nrow(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7d205e14-62eb-44b9-9624-3dba03c0b8ab",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "kfold_mspe <- c()\n",
    "for(i in 1:k){\n",
    "    model <- lm(medv ~ ., df_folds[[i]]$train)\n",
    "    y_hat <- predict(model, df_folds[[i]]$test)\n",
    "    kfold_mspe[i] <- mean((y_hat - df_folds[[i]]$test$medv)^2)\n",
    "}\n",
    "kfold_mspe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a7be8406-58d6-4390-9757-f965677a67d4",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "# mean(kfold_mspe)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9d5f071-fb05-4201-a080-e00f7524ca3e",
   "metadata": {},
   "source": [
    "## Wrapped in a function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ed4e0bb1-2290-4e25-87ab-e0824ad83d88",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "make_folds <- function(df, k){\n",
    "    \n",
    "    folds <- sample(1:k, nrow(df), replace=T)\n",
    "\n",
    "    df_folds <- list()\n",
    "\n",
    "    for(i in 1:k){\n",
    "        \n",
    "        df_folds[[i]] <- list()\n",
    "        \n",
    "        df_folds[[i]]$train = df[which(folds != i), ]\n",
    "        \n",
    "        df_folds[[i]]$test = df[which(folds == i), ]\n",
    "    }\n",
    "    \n",
    "    return(df_folds)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "be23aa16-396a-4aa2-a71e-740eaf2c8f24",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "cv_mspe <- function(formula, df_folds){\n",
    "    \n",
    "    kfold_mspe <- c()\n",
    "    \n",
    "    for(i in 1:length(df_folds)){\n",
    "        \n",
    "        model <- lm(formula, df_folds[[i]]$train)\n",
    "        \n",
    "        y_hat <- predict(model, df_folds[[i]]$test)\n",
    "        \n",
    "        kfold_mspe[i] <- mean((y_hat - df_folds[[i]]$test$medv)^2)\n",
    "    }\n",
    "    \n",
    "    return(mean(kfold_mspe))\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "9beae164-1582-461a-9e20-cb48c5413825",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "cv_mspe(medv ~ ., df_folds)\n",
    "cv_mspe(medv ~ 1, df_folds)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d30f148-0035-413a-b146-041543eb52a3",
   "metadata": {},
   "source": [
    "### Using the`caret`  package"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5334492-9527-4795-b3c9-54aa13bd8119",
   "metadata": {},
   "source": [
    "Define the training control for cross validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8d8b8774-6f04-4a37-933b-b31d24103760",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "ctrl <- trainControl(method = \"cv\", number = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a2ce3a9e-ccfb-4c15-b81d-48537e7080e1",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "model <- train(medv ~ ., data = df, method = \"lm\", trControl = ctrl)\n",
    "summary(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d956d5a2-6ced-416e-9c6c-418c126e98b7",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "predictions <- predict(model, df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a058dab1-ee2e-475f-b4c1-3814e69ae617",
   "metadata": {},
   "source": [
    "### `caret` for LASSO\n",
    "\n",
    "#### Bias-variance tradeoff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d332cf5a-f8c0-44b8-a56b-fdaee7bd5513",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "ctrl <- trainControl(method = \"cv\", number = 5)\n",
    "\n",
    "# Define the tuning grid\n",
    "grid <- expand.grid(alpha = 1, lambda = seq(0, 0.1, by = 0.001))\n",
    "\n",
    "# Train the model using Lasso regression with cross-validation\n",
    "lasso_fit <- train(\n",
    "    medv ~ ., \n",
    "    data = df, \n",
    "    method = \"glmnet\", \n",
    "    trControl = ctrl, \n",
    "    tuneGrid = grid, \n",
    "    standardize = TRUE, \n",
    "    family = \"gaussian\"\n",
    ")\n",
    "\n",
    "plot(lasso_fit)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R 4.2.2",
   "language": "R",
   "name": "ir42"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.2.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}